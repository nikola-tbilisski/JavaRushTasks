2048 (11)
Отличная работа! На этом этапе у нас уже есть полнофункциональное приложение, но ведь нет предела совершенству, давай еще поработаем.

Если ты успел какое-то время поиграть в 2048, то заметил, что порой очень хочется иметь возможность отменить последний ход.

Давай создадим в классе Model два стека, в одном будем хранить предыдущие состояния игрового поля, а в другом предыдущие счета. Назовем их previousStates и previousScores. Инициализировать можешь прямо в строке объявления или в конструкторе. Используй стандартную реализацию стека (java.util.Stack).

Добавим boolean поле isSaveNeeded = true, оно нам понадобится в будущем.

Хранилище состояний у нас есть, теперь реализуем два метода для работы с ними.
1. Приватный метод saveState с одним параметром типа Tile[][] будет сохранять текущее
игровое состояние и счет в стеки с помощью метода push и устанавливать флаг isSaveNeeded равным false.
2. Публичный метод rollback будет устанавливать текущее игровое состояние равным последнему находящемуся в стеках с помощью метода pop.

Обрати внимание на то, что при сохранении массива gameTiles необходимо создать новый массив и заполнить его новыми объектами типа Tile перед сохранением в стек.

В методе rollback достаточно просто выполнить присваивание (gameTiles = previousStates.pop()) и то же для счета, нет необходимости в глубоком копировании.

Перед восстановлением игрового состояния с помощью метода rollback не забудь проверить что стеки не пусты, чтобы избежать возникновения исключения EmptyStackException.


Requirements:
1. В классе Model должны быть объявлены и инициализированы приватные поля previousStates, previousScores, isSaveNeeded.
2. Метод saveState должен сохранять в стек previousStates новый объект типа Tile[][] с помощью метода push.
3. После вызова метода saveState веса плиток в массиве который находится на вершине стека должны совпадать с весами плиток массива полученного в качестве параметра.
4. Метод saveState должен сохранять в стек previousScores текущее значение поля score с помощью метода push.
5. Метод saveState должен устанавливать флаг isSaveNeeded равным false.
6. Метод rollback должен восстанавливать поля score и gameTiles из соответствующих стеков, если они не пусты.
7. Метод rollback не должен модифицировать текущее игровое состояние в случае, если хотя бы один из стеков пуст.
8. Каждый вызов метода saveState должен увеличивать количество элементов в стеках на единицу.
9. Каждый вызов метода rollback должен уменьшать количество элементов в стеках на единицу, до тех пор пока это возможно.