Продолжим наш путь к получению содержимого файла архива. Напишем метод getFilesList() в классе ZipFileManager.
Он будет возвращать список файлов в архиве, вернее список свойств этих файлов (класс свойств FileProperties мы уже реализовали).
Итак:
1. Добавь метод List<FileProperties> getFilesList() throws Exception в класс ZipFileManager
2. Внутри метода проверь является ли содержимое zipFile обычным файлом с помощью подходящего метода класса Files. Если это не файл, брось исключение WrongZipFileException().
3. Создай список с элементами типа FileProperties, в него мы будем складывать свойства файлов
4. Создай входящий поток ZipInputStream, для файла из переменной zipFile.
Как и в прошлые разы, оберни его создание в try-with-resources
5. Пройдись по всем элементам ZipEntry потока ZipInputStream
6. Для каждого элемента ZipEntry вычитай его содержимое, иначе у нас не будет информации о его размере.
Нельзя узнать размер файла в архиве, не вычитав его. Это очень легко сделать с помощью функции copyData, используя временный буфер типа ByteArrayOutputStream.
7. Получи имя, размер, сжатый размер и метод сжатия элемента архива. Посмотри, что еще можно узнать о нем.
8. Создай объект класса FileProperties, используя полученные данные о файле.
9. Добавь созданный объект из п.8 в список из п.3
10. После выхода из цикла верни собранную информацию вызвавшему методу.

Требования:
•	В классе ZipFileManager нужно создать публичный метод List<FileProperties> getFilesList() throws Exception.
•	Если Path zipFile не является файлом, метод getFilesList должен кинуть исключение WrongZipFileException.
•	Метод getFilesList должен пройтись по всем файлам архива и вернуть данные о них. Реализация должна быть выполнена согласно описанию в задании.
•	Поток для чтения из архива должен быть закрыт.
14

Input data
