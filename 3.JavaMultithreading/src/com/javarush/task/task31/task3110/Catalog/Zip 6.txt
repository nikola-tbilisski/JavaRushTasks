Представь, что пользователь сообщает нам с помощью переменной Operation operation, что он хочет сделать.
Тогда мы должны проверить значение этой переменной, создать объект соответствующего класса команды и вызвать у него метод execute().
Чтобы не создавать объект класса нужной команды каждый раз, его нужно где-то хранить.
Создадим для этих целей класс CommandExecutor, пусть у него будет открытым только один публичный статический метод execute(Operation operation), который найдет нужную команду и вызовет у нее метод execute.

1. Создай класс CommandExecutor.
Он должен быть в корне задачи, не стоит добавлять его в пакет command
2. Запрети явный вызов конструктора этого класса
3. Добавь в класс приватное статическое константное хранилище команд
Map<Operation, Command> ALL_KNOWN_COMMANDS_MAP = new HashMap<>()
4. Добавь в хранилище ALL_KNOWN_COMMANDS_MAP все значения Operation так, чтобы каждому значению соответствовала правильная команда. Поскольку хранилище создается один раз, то добавление значений лучше сделать в статическом блоке инициализации.
5. Реализуй публичный статический метод execute(Operation operation) throws Exception, который должен брать нужную команду из ALL_KNOWN_COMMANDS_MAP и вызывать у нее метод execute.
Догадался ты или нет, но ты только что реализовал паттерн Команда!

Требования:
•	В корне задачи должен быть создан класс CommandExecutor.
•	Запрети явный вызов конструктора CommandExecutor.
•	В классе CommandExecutor нужно создать приватное статическое константное поле Map<Operation, Command> ALL_KNOWN_COMMANDS_MAP.
•	Поле ALL_KNOWN_COMMANDS_MAP должно быть проинициализировано всеми значениями Operation и соответствующими Command-классами.
•	В классе CommandExecutor нужно реализовать метод execute(Operation operation), который будет вызывать execute у нужной команды из ALL_KNOWN_COMMANDS_MAP.
14

Input data
