Пришло время что-нибудь удалить из архива. Архив очень хитрая штука, нельзя вот так просто взять и удалить какой-то элемент внутри него.
Почему? Представь, что мы решили сами придумать свой алгоритм сжатия текста. Посмотрев исходный текст, мы видим, что в нем часто встречается фраза "быть программистом круто". Мы можем в месте, где второй, третий, N-ый раз встречается наша фраза сделать пометку, что тут была фраза, как в строке S начиная с символа номер K и длиной N, а саму фразу удалить. Когда мы заменим много повторяющихся фраз, текст заметно сократится, но станет нечитаемым для тех, кто не знаком с нашим алгоритмом сжатия.
Мы же этот текст сможем восстановить (разархивировать).
А теперь представь, что нам нужно удалить часть текста, на которую ссылались сжатые фрагменты. В такой ситуации, весь наш архив перестанет иметь смысл. Вот почему нельзя просто так удалить часть архива.
Это очень примерное описание варианта архивации, в реальности все намного сложнее.
Поэтому, чтобы что-то удалить из архива, нужно создать новый архив, переписать в него все, кроме удаляемых файлов, а потом заменить старый архив вновь созданным.

1. Добавь публичный метод для удаления файлов из архива void removeFiles(List<Path> pathList) throws Exception в класс ZipFileManager.
В pathList будет передаваться список относительных путей на файлы внутри архива.
Он должен:
1.1. Бросать исключение WrongZipFileException, если файл архива не существует.
1.2. Создать временный файл архива в директории по умолчанию с помощью метода createTempFile() класса Files.
1.3. Пройтись по всем файлам оригинального архива, проверить, есть ли текущий файл в списке на удаление.
- Если файл есть в списке, вывести сообщение, что мы удалили файл с таким-то именем и перейти к следующему файлу.
- Если файла нет в списке на удаление, переписать его в новый архив
1.4. Заменить оригинальный файл архива временным, в который мы записали нужные файлы.
Это нужно сделать с помощью метода move() класса Files
2. Добавь публичный метод void removeFile(Path path) throws Exception в класс ZipFileManager, который будет вызывать метод removeFiles, создавая список из одного элемента.
Это можно сделать с помощью метода singletonList() класса Collections. Посмотри, как он работает.
3. Реализуй метод execute() класса ZipRemoveCommand, создав объект класса ZipFileManager, спросив пользователя из какого архива и какой файл будем удалять, и вызвав метод removeFile().
Все остальное, как и в других командах. Исключение PathIsNotFoundException можно не ловить, т.к. метод removeFile() не должен его кидать.
4. Запусти программу и проверить, что удаление файла из архива работает.

Требования:
•	В классе ZipFileManager нужно создать публичный метод void removeFiles(List<Path> pathList) throws Exception.
•	Метод removeFiles должен бросать исключение WrongZipFileException, если файл архива не существует.
•	Метод removeFiles должен создавать временный файл архива с помощью метода Files.createTempFile.
•	Метод removeFiles должен записывать в новый архив все файлы из старого архива, кроме тех, которые в списке на удаление. Затем, заменить старый архив новым.
•	В классе ZipFileManager нужно создать публичный метод void removeFile(Path path) throws Exception, который будет делегировать свое выполнение методу removeFiles(List<Path> pathList).
•	Метод execute() в классе ZipRemoveCommand должен получить объект ZipFileManager и удалить из архива файл, считанный с консоли.
14

Input data
