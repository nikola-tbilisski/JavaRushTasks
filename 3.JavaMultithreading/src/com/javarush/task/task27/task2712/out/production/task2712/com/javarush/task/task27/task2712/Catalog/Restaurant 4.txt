Ресторан(4)
Что мы имеем? Повар приготовил блюда, пора их уносить, а официант не знает об этом.
Нужно уведомить официанта, что пора забирать заказ с кухни.
Ситуация аналогична предыдущему заданию, поэтому снова будем использовать паттерн Observer.

1. Создадим класс Waiter(Официант) в пакете kitchen, он будет относить заказы назад к столику. Официант будет безымянным.

2. Cook(Повар) готовит заказы, а Waiter их обрабатывает. Расставь правильно Observer и Observable между Waiter и Cook.

3. Метод void update(Observable observable, Object arg) будет выводить в консоль сообщение о том, какой заказ и кем был приготовлен:
order + " was cooked by " + cook

4. В классе наследнике Observable перед отправкой заказа сделаем следующее:

4.1. Установим флаг setChanged()

4.2. Отправим наблюдателю заказ - notifyObservers(order);

5. Пишем main.
Для объекта Observable добавляем свой объект Observer. См. п.2 и описание паттерна в wikipedia
Называем повара, имя не влияет на тесты. В моем варианте - это Amigo :)

Сверим выводы в консоль. Пример моего вывода:
Your order: [WATER] of Tablet{number=5}
Start cooking - Your order: [WATER] of Tablet{number=5}
Your order: [WATER] of Tablet{number=5} was cooked by Amigo


Requirements:
1. Класс Waiter должен реализовывать интерфейс Observer.
2. Класс Cook должен быть потомком класса Observable.
3. В методе update класса Cook должен быть вызван метод setChanged.
4. В методе update класса Cook должен быть вызван метод notifyObservers с текущим заказом в качестве параметра.
5. Метод update в классе Waiter должен выводить на экран строку отформатированную согласно заданию.
6. В методе main класса Restaurant должен быть создан новый официант и добавлен повару в качестве наблюдателя с помощью метода addObserver.